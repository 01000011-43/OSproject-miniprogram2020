一、基础知识：
 	数据库索引类型：
1.普通索引 ： 
ALTER mytable ADD INDEX [indexName] ON (username(length)) 
or  CREATE TABLE mytable(  
ID INT NOT NULL,   
 			username VARCHAR(16) NOT NULL,   
INDEX [indexName] (username(length))  );  
2.唯一索引: 索引列的值必须唯一，但允许有空值。
ALTER mytable ADD UNIQUE [indexName] ON (username(length)) 
Or 	CREATE TABLE mytable(   
ID INT NOT NULL,   
username VARCHAR(16) NOT NULL,  
UNIQUE [indexName] (username(length))  );  
3.主键索引: 它是一种特殊的唯一索引，不允许有空值
CREATE TABLE mytable(  
ID INT NOT NULL,   
username VARCHAR(16) NOT NULL,   
PRIMARY KEY(ID)  );  
4.组合索引：
    ALTER TABLE mytable ADD INDEX name_city_age (name(10),city,age); 
将多个索引组合在一起成为一个索引，但是组合索引遵循最左前缀的原则，实际上只生成了usernname,city,age  +  usernname,city  +  usernname三种组合方式

CDN: 即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。
简单讲就是将中心服务器的内容发布到边缘服务器，比如北京的内容发往山东、沈阳，这样就不需要每次都访问中心服务器了。

Sql注入：SQL注入攻击指的是通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的一些组合，通过执行SQL语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统
类型：	
1.数字型注入 1=1 1=2 ‘等
2.字符型注入 。 注释符 -- 
3.其他类型 Cookie 注入、POST 注入、延时注入等

二、代码：
题目：https://leetcode-cn.com/problems/4sum/submissions/


答案：
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        vector<vector<int> > v;
        if(nums.size()<4) return v;
        int i, j, k, l, s = nums.size();
        for(int i = 0 ; i < s-3; ++i){ //至少要有四个数
            if(i>0 && nums[i]== nums[i-1]) continue;
            for(int j = i + 1; j < s-2; ++j){
                if(j>i+1 && nums[j]== nums[j-1]) continue;
                int k = j+1, l = s-1;
                while(k<l){
                    if(nums[i]+nums[j]+nums[k]+nums[l] > target) {
                        --l;
                    }
                    else if(nums[i]+nums[j]+nums[k]+nums[l] < target) {
                        ++k;
                    }
                    else {
                        v.push_back(vector<int>{nums[i],nums[j],nums[k],nums[l]});                  
                        while(k<l && nums[k]==nums[k+1]) ++k;
                        while(k<l && nums[l]==nums[l-1]) --l;
                        ++k;
                        --l;
                    }
                
                }
            }
        }
        return v;
    }
};
三、开源工作：
上传今日学习内容。
